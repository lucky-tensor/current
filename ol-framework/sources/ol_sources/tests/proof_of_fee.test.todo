// #[test_only]
// module ol_framework::test_pof {
//   use ol_framework::mock;
//   use ol_framework::proof_of_fee;
//   use std::vector;

//   #[test(vm = @ol_framework)]
//   public entry fun thermostat_unit_happy(vm: signer) {
//     mock::genesis();

//     let start_value = 0510; // 51% of baseline reward
//     let median_history = vector::empty<u64>(); 

//     let i = 0;
//     while (i < 10) {
//       let factor = i * 10;
//       let value = start_value + factor;
//       // print(&value);
//       vector::push_back(&mut median_history, value);
//       i = i + 1;
//     };


//     proof_of_fee::test_mock_reward(
//       &vm,
//       100,
//       50,
//       33,
//       median_history,
//     );

//     // no changes until we run the thermostat.
//     let (value, clearing, median) = proof_of_fee::get_consensus_reward();
//     assert!(value == 100, 1000);
//     assert!(clearing == 50, 1001);
//     assert!(median == 33, 1002);

//     proof_of_fee::reward_thermostat(&vm);

//     // This is the happy case. No changes since the rewards were within range
//     // the whole time.
//     let (value, clearing, median) = proof_of_fee::get_consensus_reward();
//     assert!(value == 100, 1000);
//     assert!(clearing == 50, 1001);
//     assert!(median == 33, 1002);

//   }
// }